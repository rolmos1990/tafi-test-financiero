<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Financiero Orkes - Test</title>
  <!-- Material Design Lite CSS -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <link rel="stylesheet" href="https://code.getmdl.io/1.3.0/material.indigo-pink.min.css">
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/5.1.3/css/bootstrap.min.css">
  <!-- Axios -->
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <style>
    /* Fondo gris */
    body {
      background-color: #f0f0f0;
      position: relative;
    }
    /* Centrar el contenido */
    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
    }
    /* Ocultar el campo de selección de archivo */
    input[type="file"] {
      display: none;
    }
    /* Card de archivo */
    .file-card {
      width: 300px;
      margin-top: 20px;
    }
    .file-card .card-body {
      display: flex;
      align-items: center;
    }
    .file-icon {
      margin-right: 10px;
    }
    /* Estilo para el texto del nombre del archivo */
    #fileName {
      margin-top: 20px;
      font-size: 16px;
      font-weight: 400;
    }
    /* Barra de notificaciones */
    .notification-bar {
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      background-color: #4CAF50;
      color: white;
      text-align: center;
      padding: 10px;
      display: none;
      animation: slideInDown 1s ease-in-out;
    }
    /* Label de estado */
    .state-label {
      position: absolute;
      top: 20px;
      left: 20px;
      background-color: #757575;
      color: white;
      padding: 5px 10px;
      border-radius: 5px;
      font-size: 14px;
    }
    .label-danger {
      background-color: #FF6F00;
    }
    .label-warning {
      background-color: #FFC107;
    }
    .label-success {
      background-color: #558B2F;
    }
    /* Animación de entrada */
    @keyframes slideInDown {
      from {
        transform: translateY(-5%);
      }
      to {
        transform: translateY(0);
      }
    }
  </style>
</head>
<body>
  <dialog id="modal" class="mdl-dialog">
    <h4 class="mdl-dialog__title">Financiero <small>Parametros</small></h4>
    <div class="mdl-dialog__content">
      <!-- Contenido del modal -->
      <form action="#">
        <div class="mdl-textfield mdl-js-textfield">
          <input class="mdl-textfield__input" type="text" id="nombre">
          <label class="mdl-textfield__label" for="nombre">Nombre</label>
        </div>
        <div class="mdl-textfield mdl-js-textfield">
          <input class="mdl-textfield__input" type="text" id="separador">
          <label class="mdl-textfield__label" for="separador">Tabulacion</label>
        </div>
        <div class="mdl-textfield mdl-js-textfield">
          <input class="mdl-textfield__input" type="text" id="calificador">
          <label class="mdl-textfield__label" for="separador">Calificador de Texto</label>
        </div>
        <div class="mdl-textfield mdl-js-textfield">
          <input class="mdl-textfield__input" type="text" id="encabezado">
          <label class="mdl-textfield__label" for="separador">Linea Encabezado</label>
        </div>
        <div class="mdl-textfield mdl-js-textfield">
          <input class="mdl-textfield__input" type="text" id="piedepagina">
          <label class="mdl-textfield__label" for="separador">Linea Pie de Pagina</label>
        </div>
        <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
          <select class="mdl-textfield__input" id="tipoDeArchivo">
            <option value="" disabled selected></option>
            <option value="option1">CSV</option>
            <option value="option2">PDF</option>
          </select>
          <label class="mdl-textfield__label" for="tipoDeArchivo">Tipo de Archivo</label>
        </div>
        <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
          <select class="mdl-textfield__input" id="automatica">
            <option value="" disabled selected></option>
            <option value="true">Si</option>
            <option value="false">No</option>
          </select>
          <label class="mdl-textfield__label" for="automatica">Automatica?</label>
        </div>
        </div>
        <!-- Agregar más campos de texto según sea necesario -->
      </form>
    </div>
    <div class="mdl-dialog__actions">
      <!-- Botón para guardar -->
      <button type="button" class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored" id="guardarConfig">Guardar</button>
      <!-- Botón para cerrar -->
      <button type="button" class="mdl-button mdl-js-button mdl-button--raised" id="cerrarModal">Cerrar</button>
    </div>
  </dialog>

  <div class="container">
    <input type="hidden" value="" id="executionId" />
    <!-- Label de estado -->
    <span class="state-label">No Iniciado</span>
    
    <div class="mdl-card__title">
    <h4 class="mdl-typography--display-1">Subir archivo de Pagos</h4>
    </div>
    <div class="mdl-button--raised" style="text-align:center;">
    <p class="mdl-card__supporting-text"> ::::::::: Interfaz de prueba para Orkes ::::::::: </p>
    <a href="#modal">Generar configuracion</a>
    <img class="img" style="width:120px; text-align:center;" src="https://avatars.githubusercontent.com/u/92276411?s=280&v=4" />
    </div>

    <div class="mdl-card mdl-shadow--2dp fade-in">
      <div class="mdl-card__title">
        <h2 class="mdl-card__title-text">Subir archivo</h2>
      </div>
      <div class="mdl-card__supporting-text">
        <h5>Seleccione archivo de conciliaciones</h5>
        <!-- Campo de selección de archivo oculto -->
        <input type="file" id="fileInput" class="mdl-textfield__input mb-3">
        <!-- Botón con icono -->
        <label id="label-fileinput" for="fileInput" class="mdl-button mdl-button--raised">
          <i class="material-icons">cloud_upload</i> &nbsp; Subir
        </label>
      </div>
    </div>

    <!-- Card de archivo cargado -->
    <div class="card file-card">
      <div class="card-body">
        <i class="material-icons file-icon">description</i>
        <p class="card-text mdl-typography--body-1" id="fileName">No hay archivos</p>
      </div>
    </div>

    <!-- Barra de notificaciones -->
    <div class="notification-bar" id="notificationBar">Documento ha sido cargado</div>
  </div>

  <!-- Material Design Lite JS -->
  <script src="https://code.getmdl.io/1.3.0/material.min.js"></script>
  <script>

    // Función para mostrar el nombre del archivo seleccionado
    function showFileName(event) {
      const files = event.target.files;
      const fileNameElement = document.getElementById('fileName');
      const notificationBar = document.getElementById('notificationBar');
      const stateLabel = document.querySelector('.state-label');

      // Cambiar el estado del label
      stateLabel.textContent = 'Cargando';
      stateLabel.style.backgroundColor = '#FFCA28'; // Amarillo

      // Mostrar el nombre del primer archivo seleccionado en la card
      fileNameElement.textContent = files.length > 0 ? files[0].name : 'No file selected';

      // Mostrar la barra de notificaciones
      notificationBar.style.display = 'block';

      // Ocultar la barra de notificaciones después de 3 segundos
      //setTimeout(() => {

      //}, 3000);

      const request = {
        type: "change_workflow_state",
        data: {
          id: document.getElementById("executionId").value,
          estado: "Continuado",
          operacion: "Carga de Documento"
        }
      };

      addNewRequest(request.type, request.data, onComplete = function() {
        
        notificationBar.style.display = 'none';
        // Cambiar el estado del label
        //stateLabel.textContent = 'Completado';
        //stateLabel.style.backgroundColor = '#4CAF50'; // Verde

      });

    }

    function disabledLoadFile(){
          document.getElementById("label-fileinput").className = "mdl-button mdl-button--raised mdl-button--disabled";
          document.getElementById("fileInput").disabled = true;
    }
    function enabledLoadFile(){
          document.getElementById("label-fileinput").className = "mdl-button mdl-button--raised mdl-button--colored";
          document.getElementById("fileInput").disabled = false;
    }

    function cambiarEstado(estado = "No iniciado") {
      const stateLabel = document.querySelector('.state-label');
      let label = estado;

      let color;
      switch (estado) {
        case "Pausado":
          label = "Pendiente de Carga";
          color = '#FFCA28'; // Amarillo
          enabledLoadFile();
          break;
        case "EnEjecucion":
          label = "Iniciado";
          color = '#2196F3'; // Azul
          disabledLoadFile();
          break;
        case "Continuado":
        label = "Procesando";
        color = '#2196F3'; // Azul
        disabledLoadFile();
        break;
        case "Terminado":
          label = "Completado";
          color = '#4CAF50'; // Verde
          disabledLoadFile();
          break;
        default:
          label = "No iniciado";
          color = '#9E9E9E'; // Gris
          disabledLoad();
          break;
      }
      stateLabel.style.backgroundColor = color;
      stateLabel.textContent = label;
}

    // Escuchar cambios en la selección de archivos
    document.getElementById('fileInput').addEventListener('change', showFileName);
    disabledLoadFile();

    // Clase AxiosService para realizar solicitudes HTTP utilizando Axios
    class AxiosService {
      // Método para realizar una solicitud POST
      static async post(url, data) {
        try {
          const response = await axios.post(url, data);
          return response.data;
        } catch (error) {
          console.error('Error:', error);
          throw error;
        }
      }
    }

    // Método para llamar al servicio REST POST con parámetros simulados
    function addNewRequest(type, body, callback) {
      // URL del servicio REST
      const url = 'http://localhost:3000/publicar';

      // Parámetros simulados
      const params = {
        type: type,
        data: body
      };

      // Llamar al servicio REST utilizando AxiosService
      AxiosService.post(url, params)
        .then(response => {
          callback(response)
        })
        .catch(error => {
          callback(error);
        });
    }

    // Llamar al método para probar la llamada al servicio REST
    //callRestService();
  </script>

  <script>

    document.getElementById("fileInput").disabled = true;
    //recibir actualizaciones...
    const ws = new WebSocket('ws://localhost:3000');

    // Manejar mensajes del servidor
    ws.onmessage = (event) => {
      if(event.data){
        console.log("has data..");
        const _data = JSON.parse(event.data);
        const _topic = _data.topic;
        const _body = _data.data;
        console.log("data topic", _topic);
        if(_topic){
          console.log("has topic..");
          switch(_topic){
            case "tafi-orquestador-flujo-de-trabajo-estado-notificacion":
              if(_body.ejecucion.estadoFlujoTrabajo == "EnEjecucion" || _body.ejecucion.estadoFlujoTrabajo == "Pausado"){
                document.getElementById("executionId").value = _body.ejecucion.id;
              }
              console.log("Nuevo estado ejecucion...", _body.ejecucion.estadoFlujoTrabajo);
              cambiarEstado(_body.ejecucion.estadoFlujoTrabajo);
            break;
            case "":
            break;  
            default:
          }
        }
      }
      console.log('event data: ', event);
    };

    cambiarEstado();

    // Manejar errores
    ws.onerror = (error) => {
      console.error('WebSocket error:', error);
    };

    // Manejar cierre de la conexión
    ws.onclose = () => {
      console.log('WebSocket connection closed');
    };
  </script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const modal = document.getElementById('modal');
      const openModalBtn = document.querySelector('[href="#modal"]');
      const cerrarModalBtn = document.getElementById('cerrarModal');

      // Función para abrir el modal
      openModalBtn.addEventListener('click', function() {
        modal.showModal();
      });

      // Función para cerrar el modal
      cerrarModalBtn.addEventListener('click', function() {
        modal.close();
      });

      // Función para guardar la configuración
      const guardarConfigBtn = document.getElementById('guardarConfig');
      guardarConfigBtn.addEventListener('click', function() {
        
        // Obtener valores de los campos
        const nombre = document.getElementById('nombre');
        const separador = document.getElementById('separador');
        const calificador = document.getElementById('calificador');
        const encabezado = document.getElementById('encabezado');
        const piedepagina = document.getElementById('piedepagina');
        const tipoDeArchivo = document.getElementById('tipoDeArchivo');
        const automatica = document.getElementById('automatica');
        
        // Llamar al método enviar con los valores como argumentos
        
        const metadata = {
          idFinanciera: 123,
          separador: separador.value,
          calificador: calificador.value,
          encabezado: encabezado.value,
          piedepagina: piedepagina.value,
          tipoDeArchivo: tipoDeArchivo.value,
          automatica: automatica.value ? true: false
        };

        addNewRequest("new_orquestation", {
            nombre: nombre.value,
            descripcion: "Financiero - " + nombre,
            metadata: metadata
          }, function(resp) {
              separador.value = "";
              calificador.value = "";
              encabezado.value = "";
              piedepagina.value = "";
              tipoDeArchivo.value = "";
              automatica.value = "";

              //editar orquestacion con la respuesta
        });

        // Cerrar el modal después de enviar los valores
        modal.close();
      });

    });
  </script>
</body>
</html>
